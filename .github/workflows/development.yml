name: Development

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ["3.9", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Install dependencies
        run: pip install tox
      - name: Run quality checks
        run: tox -e quality

  ui-quality-checks:
    permissions:
      contents: "read"
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci

      - name: Run quality and typing checks
        run: npm run lint

  type-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ["3.9", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Install dependencies
        run: pip install tox
      - name: Run quality checks
        run: tox -e types

  ui-type-checks:
    permissions:
      contents: "read"
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci

      - name: Run quality and typing checks
        run: npm run type-check

  precommit-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ["3.9"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Install dependencies
        run: pip install pre-commit
      - name: Run pre-commit checks
        run: SKIP=ruff-format pre-commit run --all-files

  ui-precommit-checks:
    permissions:
      contents: "read"
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci

      - name: Run pre-commit checks
        run: npx husky run pre-commit

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ["3.9", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Install dependencies
        run: pip install tox
      - name: Run unit tests
        run: tox -e test-unit -- -m "smoke or sanity"

  ui-unit-tests:
    permissions:
      contents: "read"
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

  integration-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ["3.9", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Install dependencies
        run: pip install tox
      - name: Run integration tests
        run: tox -e test-integration -- -m smoke

  ui-integration-tests:
    permissions:
      contents: "read"
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: npm run test:integration

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ["3.9"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Install dependencies
        run: pip install tox
      - name: Build the package
        run: |
          export GUIDELLM_BUILD_TYPE=dev
          export GUIDELLM_BUILD_ITERATION=${{ github.event.pull_request.number }}
          tox -e build
      - name: Upload build artifacts
        id: artifact-upload
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/*
          compression-level: 6
          if-no-files-found: error
          retention-days: 30
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.GH_NM_REDHAT_AUTOMATION_APP_ID }}
          private-key: ${{ secrets.GH_NM_REDHAT_AUTOMATION_APP_PRIVATE_KEY }}
      - name: Comment Install instructions
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸ“¦ **Build Artifacts Available**
              The build artifacts (\`.whl\` and \`.tar.gz\`) have been successfully generated and are available for download: ${{ steps.artifact-upload.outputs.artifact-url }}.
              They will be retained for **up to 30 days**.
              `
            })

  ui-pr-preview:
    needs: [ui-quality-checks, ui-precommit-checks, ui-unit-tests, ui-integration-tests]
    permissions:
      contents: write
      pull-requests: write
      issues: write
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci

      - name: Build app to root
        id: build
        run: |
          # Export vars to ensure they are loaded before build
          export $(grep -v '^#' .env.development | xargs)

          PR_NUMBER=${{ github.event.pull_request.number }}
          echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT

          # Set asset prefix and base path with PR number
          ASSET_PREFIX=https://neuralmagic.github.io/guidellm/ui/pr/${PR_NUMBER}
          USE_MOCK_DATA=true
          BASE_PATH=/ui/pr/${PR_NUMBER}
          GIT_SHA=${{ github.sha }}
          export ASSET_PREFIX=${ASSET_PREFIX}
          export BASE_PATH=${BASE_PATH}
          export GIT_SHA=${GIT_SHA}
          export USE_MOCK_DATA=${USE_MOCK_DATA}
          npm run build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./ui/out
          destination_dir: ui/pr/${{ steps.build.outputs.pr_number }}
          keep_files: false
          user_name: ${{ github.actor }}
          user_email: ${{ github.actor }}@users.noreply.github.com
          publish_branch: gh-pages

      - name: Set deployment url
        id: deploy
        run: |
          DEPLOY_URL=https://neuralmagic.github.io/guidellm/ui/pr/${{ steps.build.outputs.pr_number }}
          echo "url=${DEPLOY_URL}" >> $GITHUB_OUTPUT

      - name: Post Deployment URL to PR
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ðŸŽ‰ **Live Preview:** [Click here to view the live version](${{ steps.deploy.outputs.url }})
